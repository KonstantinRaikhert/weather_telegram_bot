import logging
import datetime
import pytz

from telegram import ParseMode, Update
from telegram.ext import CallbackContext
from telegram.ext.conversationhandler import ConversationHandler
from telegram.replykeyboardremove import ReplyKeyboardRemove

from utility import GREETING
from keyboard import (
    basic_keyboard,
    settings_keyboard,
    geolocation_keyboard,
    change_time_keyboard,
)
from mongo import (
    db,
    search_or_save_user,
    search_user,
    get_user_name,
    save_user_name,
    save_user_geolocation,
    get_user_coordinates,
    save_user_timezone,
    get_user_timezone,
    save_time_notification,
    get_time_notification,
)
from weather import (
    get_geolocation_from_yandex,
    get_timezone_for_geolocation,
    weather_formating,
)


file_log = logging.FileHandler("bot.log")
console_out = logging.StreamHandler()
logging.basicConfig(
    handlers=(file_log, console_out),
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)


def start(update: Update, _: CallbackContext):
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")


def starting(update: Update, _: CallbackContext):
    user = search_or_save_user(
        db, update.effective_user, update.effective_message
    )
    text = (
        "{} {}!\n"
        "\n"
        "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è\n"
        "—è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É\n"
        "–∏ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –¥–µ–Ω—å –∏ –Ω–æ—á—å.\n"
        "–í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å\n"
        "—Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥ –∏ –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è."
        "".format(GREETING, user["first_name"])
    )
    update.message.reply_text(text, reply_markup=basic_keyboard())


def remove_job(name: str, context: CallbackContext):
    current_jobs = context.job_queue.get_jobs_by_name(name)
    for job in current_jobs:
        job.schedule_removal()


def get_geolocation(update: Update, context: CallbackContext):
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è\n" "–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –í–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è"
    update.message.reply_text(text, reply_markup=geolocation_keyboard())


def save_geolocation(update: Update, _: CallbackContext):
    coordinates = update.message.location
    timezone = get_timezone_for_geolocation(coordinates)
    coordinates_for_ya = (
        str(coordinates["longitude"]) + "," + str(coordinates["latitude"])
    )
    location = get_geolocation_from_yandex(coordinates_for_ya)[
        "metaDataProperty"
    ]["GeocoderMetaData"]["text"]
    save_user_geolocation(db, update.effective_user.id, coordinates, location)
    user = search_or_save_user(
        db, update.effective_user, update.effective_message
    )
    save_user_geolocation(db, update.effective_user.id, coordinates, location)
    save_user_timezone(db, update.effective_user.id, timezone)
    text = "–ì–æ—Ç–æ–≤–æ {}. –ë—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è:\n" "{}".format(
        user["first_name"], user["location"]
    )
    update.message.reply_text(text, reply_markup=basic_keyboard())


def change_city(update: Update, _: CallbackContext):
    text = (
        "–ù–∞–ø–∏—à–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –∏ –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç.\n"
        "–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω—É."
    )
    update.message.reply_text(text, reply_markup=ReplyKeyboardRemove())
    return "location"


def save_city(update: Update, context: CallbackContext):
    context._user_data["location"] = update.message.text
    location_for_ya = get_geolocation_from_yandex(
        context._user_data["location"]
    )
    user_coord = {
        "longitude": float((location_for_ya["Point"]["pos"]).split()[0]),
        "latitude": float((location_for_ya["Point"]["pos"]).split()[1]),
    }
    location = location_for_ya["metaDataProperty"]["GeocoderMetaData"]["text"]
    timezone = get_timezone_for_geolocation(user_coord)
    save_user_geolocation(db, update.effective_user.id, user_coord, location)
    save_user_timezone(db, update.effective_user.id, timezone)
    user = search_or_save_user(
        db, update.effective_user, update.effective_message
    )
    text = "–ì–æ—Ç–æ–≤–æ {}. –ë—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è:\n" "{}".format(
        user["first_name"], user["location"]
    )
    update.message.reply_text(text, reply_markup=basic_keyboard())
    return ConversationHandler.END


def change_time_notification(update: Update, context: CallbackContext):
    text = "–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —É–¥–æ–±–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ–≥–æ–¥—ã?"
    context.bot.send_message(
        chat_id=update.message.chat_id,
        text=text,
        reply_markup=change_time_keyboard(),
    )


def change_time_inlinebutton_pressed(update: Update, context: CallbackContext):
    query = update.callback_query
    chat_id = query.message.chat.id
    data = query.data
    save_time_notification(db, update.effective_user, data)
    time = get_time_notification(db, update.effective_user.id)
    hour = time[0]
    minute = time[1]
    tzinfo = pytz.timezone(get_user_timezone(db, update.effective_user.id))
    text = "–ë—É–¥—É —É–≤–µ–¥–æ–≤–º–ª—è—Ç—å –≤ {}".format(data)
    sticker_id = "CAACAgIAAxkBAAECJG5gaNIygx4rNnhNevnPojRaUi8u1AAC3QMAAvJ-ggxtuk_XOcwsnR4E" # noqa
    context.bot.edit_message_text(
        text=text,
        chat_id=query.message.chat.id,
        message_id=query.message.message_id,
    )
    update.effective_chat.send_sticker(
        sticker=sticker_id, reply_markup=basic_keyboard()
    )
    remove_job(str(chat_id), context)
    context.job_queue.run_daily(
        send_weather_in_due_time,
        time=datetime.time(hour=hour, minute=minute, tzinfo=tzinfo),
        context=chat_id,
        name=str(chat_id),
    )


def get_settings(update: Update, _: CallbackContext):
    text = (
        "–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ—ë –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ.\n"
        "–ê –µ—Å–ª–∏ –í–∞–º –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, –∫–∞–∫ —è –∫ –í–∞–º\n"
        "–æ–±—Ä–∞—â–∞—é—Å—å, —Å–º–µ–Ω–∏—Ç–µ –∏–º—è. üëª"
    )
    update.message.reply_text(text, reply_markup=settings_keyboard())


def change_name(update: Update, _: CallbackContext):
    text = "–ö–∞–∫ –∏–∑–≤–æ–ª–∏—Ç–µ –≤–µ–ª–∏—á–∞—Ç—å?"
    update.message.reply_text(text, reply_markup=ReplyKeyboardRemove())
    return "first_name"


def save_new_name(update: Update, context: CallbackContext):
    context.user_data["first_name"] = update.message.text
    save_user_name(db, update.effective_user, context.user_data)
    user = search_or_save_user(
        db, update.effective_user, update.effective_message
    )
    text = "–¢–µ–ø–µ—Ä—å –í—ã –¥–ª—è –º–µ–Ω—è {}".format(user["first_name"])
    update.message.reply_text(text, reply_markup=basic_keyboard())
    return ConversationHandler.END


def default_answer(update: Update, context: CallbackContext):
    user = search_user(db, update.effective_user)
    if user:
        text = (
            "–Ø –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥, "
            "–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ –º–µ–Ω—è —Å–∫–æ—Ä–æ –Ω–∞—É—á–∞—Ç. üòé"
        )
        update.message.reply_text(text, reply_markup=basic_keyboard())
    else:
        update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å")


def cancel_return_basic_keyboard(update: Update, _: CallbackContext):
    text = "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑... –ù—É... –∏–ª–∏ –ø–æ—Ç–æ–º."
    update.message.reply_text(text, reply_markup=basic_keyboard())


def dont_know(update: Update, _: CallbackContext):
    text = (
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –Ω—É–∂–Ω–æ –º–Ω–µ –Ω–∏—á–µ–≥–æ\n"
        "–ø—Ä—ã—Å—ã–ª–∞—Ç—å. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—ë –Ω–æ–≤–æ–µ –∏–º—è."
    )
    update.message.reply_text(text)


def send_weather(update: Update, context: CallbackContext):
    coordinates = get_user_coordinates(db, update.effective_user.id)
    time = get_time_notification(db, update.effective_user.id)
    if coordinates is None:
        text = (
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ\n"
            "–∏ –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è."
        )
        update.message.reply_text(text, reply_markup=basic_keyboard())
    elif time is None:
        text = "B—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∑–∞–±—ã–ª–∏ —É–∫–∞–∑–∞—Ç—å..."
        update.message.reply_text(text, reply_markup=basic_keyboard())
    else:
        weather = weather_formating(coordinates)
        if weather is not None:
            text_fact = (
                "<b>{}, —Å–µ–π—á–∞—Å –∑–∞ –æ–∫–Ω–æ–º:</b>\n"
                "   <i>{condition}</i>\n"
                "   <i>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</i> <b>{temp}¬∞</b>.\n"
                "   <i>–ê –≤–æ—Ç –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫</i> <b>{feels_like}¬∞</b>.\n"
                "   <i>–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞</i> <b>{humidity} %</b>.\n"
                "   <i>–î–∞–≤–ª–µ–Ω–∏–µ</i> <b>{pressure_mm} –º–º. —Ä—Ç. —Å—Ç.</b>\n"
                "   <i>–í–µ—Ç–µ—Ä</i> <b>{wind_dir}</b>.\n"
                "   <i>–°–∫–æ—Ä–æ—Å—Ç—å</i> <b>{wind_speed} –º/—Å</b>.\n"
                "   <i>–ü–æ—Ä—ã–≤—ã</i> <b>{wind_gust} –º/—Å</b>.\n"
            ).format(
                get_user_name(db, update.effective_user.id), **weather["fact"]
            )
            text_forecast = (
                "   <b>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {date}:</b>\n"
                "   <i>–í–æ—Å—Ö–æ–¥ - <b>{sunrise}</b>, "
                "   –ó–∞–∫–∞—Ç - <b>{sunset}</b>.</i>\n"
                "   <i>–§–∞–∑–∞ –õ—É–Ω—ã - {moon_text}</i>\n"
            ).format(**weather["forecast"])
            text_forecast_night = (
                "<b>{part_name} –æ–∂–∏–¥–∞–µ—Ç—Å—è:</b>\n"
                "   <i>{condition}</i>\n"
                "   <i>–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</i> <b>{temp_avg}¬∞</b>.\n"
                "   <i>–º–∏–Ω.:  </i> <b>{temp_min}¬∞</b>."
                "   <i>–º–∞–∫—Å.:  </i> <b>{temp_max}¬∞</b>.\n"
                "   <i>–ë—É–¥–µ—Ç –æ—â—É—â–∞—Ç—å—Å—è</i> <b>{feels_like}¬∞</b>.\n"
                "   <i>–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞</i> <b>{humidity} %</b>.\n"
                "   <i>–î–∞–≤–ª–µ–Ω–∏–µ</i> <b>{pressure_mm} –º–º. —Ä—Ç. —Å—Ç.</b>\n"
                "   <i>–í–µ—Ç–µ—Ä</i> <b>{wind_dir}</b>.\n"
                "   <i>–°–∫–æ—Ä–æ—Å—Ç—å</i> <b>{wind_speed} –º/—Å</b>.\n"
                "   <i>–ü–æ—Ä—ã–≤—ã</i> <b>{wind_gust} –º/—Å</b>.\n"
            ).format(**weather["forecast_night"])
            text_forecast_day = (
                "<b>{part_name}:</b>\n"
                "   <i>{condition}</i>\n"
                "   <i>–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</i> <b>{temp_avg}¬∞</b>.\n"
                "   <i>–º–∏–Ω.:  </i> <b>{temp_min}¬∞</b>."
                "   <i>–º–∞–∫—Å.:  </i> <b>{temp_max}¬∞</b>.\n"
                "   <i>–ë—É–¥–µ—Ç –æ—â—É—â–∞—Ç—å—Å—è</i> <b>{feels_like}¬∞</b>.\n"
                "   <i>–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞</i> <b>{humidity} %</b>.\n"
                "   <i>–î–∞–≤–ª–µ–Ω–∏–µ</i> <b>{pressure_mm} –º–º. —Ä—Ç. —Å—Ç.</b>\n"
                "   <i>–í–µ—Ç–µ—Ä</i> <b>{wind_dir}</b>.\n"
                "   <i>–°–∫–æ—Ä–æ—Å—Ç—å</i> <b>{wind_speed} –º/—Å</b>.\n"
                "   <i>–ü–æ—Ä—ã–≤—ã</i> <b>{wind_gust} –º/—Å</b>.\n"
            ).format(**weather["forecast_day"])
            text = (
                text_fact
                + text_forecast
                + text_forecast_night
                + text_forecast_day
            )
            update.message.reply_text(
                text, parse_mode=ParseMode.HTML, reply_markup=basic_keyboard()
            )
        else:
            text = (
                "–ü–æ—Ö–æ–∂–µ —Å–µ–≥–æ–¥–Ω—è —è —É–∂–µ —É—Å—Ç–∞–ª —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –ø–æ–≥–æ–¥—É.\n"
                "–æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞!"
            )
            update.message.reply_text(text, reply_markup=basic_keyboard())


def send_weather_in_due_time(context: CallbackContext):
    job = context.job
    coordinates = get_user_coordinates(db, job.context)
    weather = weather_formating(coordinates)
    username = get_user_name(db, job.context)
    if weather is not None:
        text_fact = (
            "<b>{}, —Å–µ–π—á–∞—Å –∑–∞ –æ–∫–Ω–æ–º:</b>\n"
            "   <i>{condition}</i>\n"
            "   <i>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</i> <b>{temp}¬∞</b>.\n"
            "   <i>–ê –≤–æ—Ç –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫</i> <b>{feels_like}¬∞</b>.\n"
            "   <i>–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞</i> <b>{humidity} %</b>.\n"
            "   <i>–î–∞–≤–ª–µ–Ω–∏–µ</i> <b>{pressure_mm} –º–º. —Ä—Ç. —Å—Ç.</b>\n"
            "   <i>–í–µ—Ç–µ—Ä</i> <b>{wind_dir}</b>.\n"
            "   <i>–°–∫–æ—Ä–æ—Å—Ç—å</i> <b>{wind_speed} –º/—Å</b>.\n"
            "   <i>–ü–æ—Ä—ã–≤—ã</i> <b>{wind_gust} –º/—Å</b>.\n"
        ).format(username, **weather["fact"])
        text_forecast = (
            "   <b>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {date}:</b>\n"
            "   <i>–í–æ—Å—Ö–æ–¥ - <b>{sunrise}</b>, –ó–∞–∫–∞—Ç - <b>{sunset}</b>.</i>\n"
            "   <i>–§–∞–∑–∞ –õ—É–Ω—ã - {moon_text}</i>\n"
        ).format(**weather["forecast"])
        text_forecast_night = (
            "<b>{part_name} –æ–∂–∏–¥–∞–µ—Ç—Å—è:</b>\n"
            "   <i>{condition}</i>\n"
            "   <i>–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</i> <b>{temp_avg}¬∞</b>.\n"
            "   <i>–º–∏–Ω.:  </i> <b>{temp_min}¬∞</b>."
            "   <i>–º–∞–∫—Å.:  </i> <b>{temp_max}¬∞</b>.\n"
            "   <i>–ë—É–¥–µ—Ç –æ—â—É—â–∞—Ç—å—Å—è</i> <b>{feels_like}¬∞</b>.\n"
            "   <i>–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞</i> <b>{humidity} %</b>.\n"
            "   <i>–î–∞–≤–ª–µ–Ω–∏–µ</i> <b>{pressure_mm} –º–º. —Ä—Ç. —Å—Ç.</b>\n"
            "   <i>–í–µ—Ç–µ—Ä</i> <b>{wind_dir}</b>.\n"
            "   <i>–°–∫–æ—Ä–æ—Å—Ç—å</i> <b>{wind_speed} –º/—Å</b>.\n"
            "   <i>–ü–æ—Ä—ã–≤—ã</i> <b>{wind_gust} –º/—Å</b>.\n"
        ).format(**weather["forecast_night"])
        text_forecast_day = (
            "<b>{part_name}:</b>\n"
            "   <i>{condition}</i>\n"
            "   <i>–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</i> <b>{temp_avg}¬∞</b>.\n"
            "   <i>–º–∏–Ω.:  </i> <b>{temp_min}¬∞</b>."
            "   <i>–º–∞–∫—Å.:  </i> <b>{temp_max}¬∞</b>.\n"
            "   <i>–ë—É–¥–µ—Ç –æ—â—É—â–∞—Ç—å—Å—è</i> <b>{feels_like}¬∞</b>.\n"
            "   <i>–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞</i> <b>{humidity} %</b>.\n"
            "   <i>–î–∞–≤–ª–µ–Ω–∏–µ</i> <b>{pressure_mm} –º–º. —Ä—Ç. —Å—Ç.</b>\n"
            "   <i>–í–µ—Ç–µ—Ä</i> <b>{wind_dir}</b>.\n"
            "   <i>–°–∫–æ—Ä–æ—Å—Ç—å</i> <b>{wind_speed} –º/—Å</b>.\n"
            "   <i>–ü–æ—Ä—ã–≤—ã</i> <b>{wind_gust} –º/—Å</b>.\n"
        ).format(**weather["forecast_day"])
        text = (
            text_fact + text_forecast + text_forecast_night + text_forecast_day
        )
        context.bot.send_message(job.context, text, parse_mode=ParseMode.HTML)
    else:
        text = (
            "–ü–æ—Ö–æ–∂–µ —Å–µ–≥–æ–¥–Ω—è —è —É–∂–µ —É—Å—Ç–∞–ª —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –ø–æ–≥–æ–¥—É.\n"
            "–æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞!"
        )
        context.bot.send_message(job.context, text)
